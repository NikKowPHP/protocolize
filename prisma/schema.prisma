generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  name           String?
  supabaseAuthId String    @unique @map("supabase_auth_id")
  role           String    @default("USER") // USER, ADMIN

  stripeCustomerId   String?   @unique @map("stripe_customer_id")
  subscriptionTier   String    @default("FREE")
  subscriptionStatus String?   @map("subscription_status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subscriptions     Subscription[]
  notes             Note[]
  reminders         UserReminder[]
  trackingLogs      UserProtocolTracking[]
  pushSubscriptions PushSubscription[]
}

model Plan {
  id              String         @id @default(cuid())
  name            String         @unique
  description     String?
  stripeProductId String?        @unique @map("stripe_product_id")
  isActive        Boolean        @default(true) @map("is_active")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  subscriptions   Subscription[]
}

model Subscription {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId     String    @map("plan_id")
  plan       Plan      @relation(fields: [planId], references: [id], onDelete: Restrict)
  status     String
  provider   String    @default("stripe")
  providerId String    @unique @map("provider_id")
  endsAt     DateTime? @map("ends_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
}

model Episode {
  id            String    @id @default(cuid())
  title         String
  episodeNumber Int?      @map("episode_number")
  publishedAt   DateTime? @map("published_at")
  description   String?   @db.Text
  sourceUrl     String?   @map("source_url")
  status        String    @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  protocols Protocol[] @relation(map: "EpisodeProtocols")
  summaries Summary[]
  notes     Note[]
}

model Protocol {
  id                  String    @id @default(cuid())
  name                String
  description         String    @db.Text
  category            String?
  implementationGuide String?   @db.Text @map("implementation_guide")
  researchLinks       Json?     @map("research_links")
  isFree              Boolean   @default(false) @map("is_free")
  status              String    @default("DRAFT") // DRAFT, PUBLISHED
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@index([name, status])
  episodes     Episode[]              @relation(map: "EpisodeProtocols")
  reminders    UserReminder[]
  trackingLogs UserProtocolTracking[]
}

model Summary {
  id        String   @id @default(cuid())
  episodeId String   @map("episode_id")
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  type      String   @default("summary")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Note {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  episodeId String   @map("episode_id")
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model UserReminder {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  protocolId   String   @map("protocol_id")
  protocol     Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  reminderTime String   @map("reminder_time")
  timezone     String
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
}

model UserProtocolTracking {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  protocolId String   @map("protocol_id")
  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  trackedAt  DateTime @map("tracked_at") @db.Date
  notes      String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([userId, protocolId, trackedAt])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String   @unique
  keys      Json
  createdAt DateTime @default(now()) @map("created_at")
}